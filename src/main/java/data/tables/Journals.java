/*
 * This file is generated by jOOQ.
*/
package main.java.data.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import main.java.data.Indexes;
import main.java.data.Keys;
import main.java.data.Public;
import main.java.data.tables.records.JournalsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Journals extends TableImpl<JournalsRecord> {

    private static final long serialVersionUID = -1122144542;

    /**
     * The reference instance of <code>public.journals</code>
     */
    public static final Journals JOURNALS = new Journals();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JournalsRecord> getRecordType() {
        return JournalsRecord.class;
    }

    /**
     * The column <code>public.journals.id</code>.
     */
    public final TableField<JournalsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('journals_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.journals.entry</code>.
     */
    public final TableField<JournalsRecord, String> ENTRY = createField("entry", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.journals.timestamp</code>.
     */
    public final TableField<JournalsRecord, Timestamp> TIMESTAMP = createField("timestamp", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.journals.user_id</code>.
     */
    public final TableField<JournalsRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.journals</code> table reference
     */
    public Journals() {
        this(DSL.name("journals"), null);
    }

    /**
     * Create an aliased <code>public.journals</code> table reference
     */
    public Journals(String alias) {
        this(DSL.name(alias), JOURNALS);
    }

    /**
     * Create an aliased <code>public.journals</code> table reference
     */
    public Journals(Name alias) {
        this(alias, JOURNALS);
    }

    private Journals(Name alias, Table<JournalsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Journals(Name alias, Table<JournalsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.JOURNALS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<JournalsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_JOURNALS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JournalsRecord> getPrimaryKey() {
        return Keys.JOURNALS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JournalsRecord>> getKeys() {
        return Arrays.<UniqueKey<JournalsRecord>>asList(Keys.JOURNALS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<JournalsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JournalsRecord, ?>>asList(Keys.JOURNALS__JOURNALS_USERS_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Journals as(String alias) {
        return new Journals(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Journals as(Name alias) {
        return new Journals(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Journals rename(String name) {
        return new Journals(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Journals rename(Name name) {
        return new Journals(name, null);
    }
}
